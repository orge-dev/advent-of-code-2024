This is an [[https://orgmode.org/][Org Mode]] file containing Emacs Lisp 🌀➿ (and for teaching/comparison purposes, some Python 🐍) code for the advent of code problems.

The *code is introduced in snippets* 💬, and the *complete code is available together at the end of each day* 📚.

🚀  *NOTE: If viewing in Github, using the "outline" mode may be helpful!* 👁 🪰🦉🐐🕮🔔

* Table of Contents                                                     :TOC_3:
- [[#day-1][Day 1]]
  - [[#part-1][Part 1]]
    - [[#first-create-a-list-of-numbers-from-the-text-input][First, create a list of numbers, from the text input]]
    - [[#split-the-raw-input-into-two-lists][Split the raw input into two lists]]
    - [[#sort-the-lists][Sort the lists]]
    - [[#compute-the-sum-of-the-differences][Compute the sum of the differences]]
  - [[#part-2][Part 2]]
  - [[#full-code][Full code]]
- [[#day-2][Day 2]]
  - [[#part-1-1][Part 1]]
    - [[#check-if-adjacent-differences-are-valid-between-1-and-3][Check if adjacent differences are valid (between 1 and 3)]]
    - [[#check-if-numbers-are-strictly-increasing-or-decreasing][Check if numbers are strictly increasing or decreasing]]
    - [[#combine-these-into-a-safe-report-predicate][Combine these into a safe-report predicate]]
    - [[#count-the-safe-reports][Count the safe reports]]
    - [[#explanation][Explanation]]
  - [[#part-2-1][Part 2]]
    - [[#does-removing-any-single-number-make-the-sequence-valid][Does removing any single number make the sequence valid?]]
    - [[#explanation-1][Explanation]]
  - [[#full-code-1][Full Code]]
- [[#day-3][Day 3]]
  - [[#part-1-2][Part 1]]
  - [[#part-2-2][Part 2]]
- [[#day-4][Day 4]]
  - [[#part-1-3][Part 1]]
  - [[#part-2-3][Part 2]]

* Day 1
** Part 1
*** First, create a list of numbers, from the text input

Python lists:
#+begin_src python
my_list = [1, 2, 3]
#+end_src

Emacs lists:
#+begin_src elisp
(setq my_list '(1 2 3))
#+end_src

See "Day 1" etc. in inputs.org for the raw inputs.

*** Split the raw input into two lists

From [[info:cl#Loop Basics][Emacs Lisp Manual cl#Loop Basics]]:

#+begin_quote
The ‘cl-loop’ macro essentially creates a mini-language within Lisp that
is specially tailored for describing loops.  While this language is a
little strange-looking by the standards of regular Lisp, it turns out to
be very easy to learn and well-suited to its purpose.
#+end_quote

Here's a way to create two separate lists by taking every other element from the raw input

#+begin_src elisp
(setq list1 (cl-loop for x in raw_input by 'cddr collect x)
      list2 (cl-loop for x in (cdr raw_input) by 'cddr collect x))
#+end_src


This uses- =by 'cddr= to skip every other element. Syntax note: It uses the builtin function =cddr=, and quotes ='= it, because it's a function, not a variable (different binding namespaces).
First loop starts from beginning, so it gets 1st, 3rd, 5th, etc. elements
Second loop starts from second element (using =cdr=) so it gets 2nd, 4th, 6th, etc. elements

**** Note about =car=, =cdr=, and =cddr=

Compare to Python:

#+begin_src python
head = my_list[0]
tail = my_list[1:]
shorter_tail = my_list[2:]
#+end_src

#+begin_src elisp
(setq
   head (car my_list)
   tail (cdr my_list)
   shorter_tail (cddr my_list))
#+end_src


*** Sort the lists


Here's how to sort the lists in ascending order:

#+begin_src elisp
(setq sorted1 (sort list1 '<)
      sorted2 (sort list2 '<))
#+end_src


The sort function in Emacs Lisp takes:
1. A list to sort
2. A predicate function (in this case '<' for ascending numeric sort)

This is similar to Python's:
#+begin_src python
sorted1 = sorted(list1)
sorted2 = sorted(list2)
#+end_src

Note: Emacs Lisp's sort modifies the original list. If you need to preserve the original, you should copy it first.


*** Compute the sum of the differences

Here's how to compute the sum of the absolute differences between corresponding elements:

#+begin_src elisp
(setq sum-of-diffs
      (cl-loop for x in sorted1
               for y in sorted2
               sum (abs (- x y))))
#+end_src

This uses cl-loop with:
- Two parallel iterators (=for x= and =for y=)
- =sum= accumulator that adds up each iteration's value
- =abs= to get absolute value
- =-= for subtraction

The equivalent Python would be:
#+begin_src python
sum_of_diffs = sum(abs(x - y) for x, y in zip(sorted1, sorted2))
#+end_src


** Part 2

#+begin_src elisp
;; For each number in list1, count how many times it appears in list2
;; Then multiply and sum
(setq similarity-score
      (cl-loop for x in list1
               sum (* x (cl-count x list2))))
#+end_src

The Python equivalent would be:
#+begin_src python
similarity_score = sum(x * list2.count(x) for x in list1)
#+end_src


** Full code

#+begin_src  elisp
(setq list1 (cl-loop for x in raw_input by 'cddr collect x)
      list2 (cl-loop for x in (cdr raw_input) by 'cddr collect x))

(setq sorted1 (sort list1 '<)
      sorted2 (sort list2 '<))

(setq sum-of-diffs
      (cl-loop for x in sorted1
               for y in sorted2
               sum (abs (- x y))))

(setq similarity-score
      (cl-loop for x in list1
               sum (* x (cl-count x list2))))

(list sum-of-diffs similarity-score)
#+end_src

* Day 2

** Part 1

*** Check if adjacent differences are valid (between 1 and 3) 

#+begin_src elisp
(defun valid-differences (nums)
  (cl-loop for (a b) on nums by #'cdr
           while b
           for diff = (abs (- b a))
           always (and (> diff 0) (<= diff 3))))
#+end_src

*** Check if numbers are strictly increasing or decreasing

#+begin_src elisp
(defun strictly-monotonic (nums)
  (or (cl-loop for (a b) on nums by #'cdr
               while b
               always (> b a))
      (cl-loop for (a b) on nums by #'cdr
               while b
               always (< b a))))
#+end_src

*** Combine these into a safe-report predicate

#+begin_src elisp
(defun safe-report-p (nums)
  (and (valid-differences nums)
       (strictly-monotonic nums)))
#+end_src

*** Count the safe reports

#+begin_src elisp
(setq safe-count
      (cl-count-if #'safe-report-p raw_input2))
#+end_src

*** Explanation

This solution uses:
- =cl-loop= with =by #'cdr= to iterate over pairs
- Predicates combined with =and=
- =cl-count-if= to count matches
- Pattern matching with =(a b)= to destructure pairs
- Short-circuiting with =always=

The Python equivalent might look like:

#+begin_src python
def valid_differences(nums):
    return all(0 < abs(b - a) <= 3 for a, b in zip(nums, nums[1:]))

def strictly_monotonic(nums):
    return all(b > a for a, b in zip(nums, nums[1:])) or \
           all(b < a for a, b in zip(nums, nums[1:]))

def safe_report(nums):
    return valid_differences(nums) and strictly_monotonic(nums)

safe_count = sum(1 for nums in raw_input2 if safe_report(nums))
#+end_src

** Part 2

*** Does removing any single number make the sequence valid?

#+begin_src elisp
(defun safe-with-removal-p (nums)
  (or (safe-report-p nums)  ; First check if already safe
      (cl-loop for i from 0 below (length nums)
               ;; Create new list without element at i
               for test-nums = (append (cl-subseq nums 0 i)
                                     (cl-subseq nums (1+ i)))
               thereis (safe-report-p test-nums))))

(setq safe-count-with-removal
      (cl-count-if #'safe-with-removal-p raw_input2))
#+end_src


**** Note on =thereis= syntax of the =cl-loop= macro

From Emacs Common Lisp Lisp Emulation Manual [[info:cl#Iteration Clauses][cl#Iteration Clauses]]:

#+begin_quote
‘thereis CONDITION’
     This clause stops the loop when the specified form is non-‘nil’; in
     this case, it returns that non-‘nil’ value.  If all the values were
     ‘nil’, the loop returns ‘nil’.
#+end_quote

*** Explanation

1. First checks if sequence is already safe
2. If not, tries removing each number one at a time:
   - Uses =cl-subseq= to slice the list before and after index
   - =append= to join the slices
   - =thereis= to return true if any attempt succeeds

The Python equivalent would be:

#+begin_src python
def safe_with_removal(nums):
    if safe_report(nums):
        return True
    return any(safe_report(nums[:i] + nums[i+1:]) 
              for i in range(len(nums)))

safe_count = sum(1 for nums in raw_input2 
                if safe_with_removal(nums))
#+end_src

Let's test both parts together:

#+begin_src elisp
(list 
 (cl-count-if #'safe-report-p raw_input2)         ; Part 1
 (cl-count-if #'safe-with-removal-p raw_input2))  ; Part 2
#+end_src

** Full Code

#+begin_src elisp
(defun valid-differences (nums)
  (cl-loop for (a b) on nums by #'cdr
           while b
           for diff = (abs (- b a))
           always (and (> diff 0) (<= diff 3))))

(defun strictly-monotonic (nums)
  (or (cl-loop for (a b) on nums by #'cdr
               while b
               always (> b a))
      (cl-loop for (a b) on nums by #'cdr
               while b
               always (< b a))))

(defun safe-report-p (nums)
  (and (valid-differences nums)
       (strictly-monotonic nums)))

(defun safe-with-removal-p (nums)

  (or (safe-report-p nums)  ; First check if already safe
      (cl-loop for i from 0 below (length nums)
               ;; Create new list without element at i
               for test-nums = (append (cl-subseq nums 0 i)
                                     (cl-subseq nums (1+ i)))
               thereis (safe-report-p test-nums))))

(setq safe-count-with-removal
      (cl-count-if #'safe-with-removal-p raw_input2))

(list 
 (cl-count-if #'safe-report-p raw_input2)         ; Part 1
 (cl-count-if #'safe-with-removal-p raw_input2))  ; Part 2
#+end_src


* Day 3

** Part 1

#+begin_src elisp :results silent
(setq raw_input3 
      (with-temp-buffer
        (insert-file-contents "input3.txt")
        (buffer-string)))

(defun find-mul-results (text)
  (cl-loop with start = 0
           while (string-match "mul(\\([0-9]+\\),\\([0-9]+\\))" text start)
           do (setq start (match-end 0))
           for x = (string-to-number (match-string 1 text))
           for y = (string-to-number (match-string 2 text))
           when (and (<= x 999) (>= x 1)
                    (<= y 999) (>= y 1))
           sum (* x y)))

(find-mul-results raw_input3)
#+end_src

** Part 2

#+begin_src elisp
(defun find-mul-results-with-conditions (text)
  (let ((enabled t)
        (total 0)
        (pos 0))
    (while (string-match (rx ;; Regex syntax with s-expressions instead of text
                          (or (seq (group (or "do" "don't")) "()")
                              (seq "mul(" 
                                   (group (repeat 1 3 digit)) 
                                   "," 
                                   (group (repeat 1 3 digit)) 
                                   ")")))
                         text pos)
      (setq pos (match-end 0))
      (if (match-string 1 text)
          (setq enabled (string= (match-string 1 text) "do"))
        (when enabled
          (let ((x (string-to-number (match-string 2 text)))
                (y (string-to-number (match-string 3 text))))
            (when (and (<= x 999) (>= x 1)
                       (<= y 999) (>= y 1))
              (setq total (+ total (* x y))))))))
    total))

(find-mul-results-with-conditions raw_input3)
#+end_src

* Day 4

** Part 1

#+begin_src elisp :results none
(setq raw_input4 
      (with-temp-buffer
        (insert-file-contents "input4.txt")
        (buffer-string)))

(defun parse-grid (text)
  "Convert text into a list of strings (rows)"
  (split-string text "\n" t))

(defun get-char (grid row col)
  "Get character at position, or nil if out of bounds"
  (when (and (>= row 0) (< row (length grid))
             (>= col 0) (< col (length (car grid))))
    (aref (nth row grid) col)))

(defun check-direction (grid row col drow dcol)
  "Check if XMAS starts at position in given direction"
  (let ((chars (list)))
    (dotimes (i 4)
      (push (get-char grid 
                      (+ row (* i drow))
                      (+ col (* i dcol)))
            chars))
    (equal (nreverse chars) '(?X ?M ?A ?S))))

(defun count-xmas (grid)
  "Count occurrences of XMAS in all directions"
  (let ((rows (length grid))
        (cols (length (car grid)))
        (directions '((0 1)   ; right
                     (1 0)   ; down
                     (1 1)   ; diagonal down-right
                     (-1 1)  ; diagonal up-right
                     (1 -1)  ; diagonal down-left
                     (-1 -1) ; diagonal up-left
                     (0 -1)  ; left
                     (-1 0)))) ; up
    (cl-loop for row from 0 below rows sum
             (cl-loop for col from 0 below cols sum
                     (cl-loop for (drow dcol) in directions
                             count (check-direction grid row col drow dcol))))))

;; Parse and solve
(let ((grid (parse-grid raw_input4)))
  (count-xmas grid))
#+end_src

** Part 2

#+begin_src elisp
(defun check-mas (grid row col pattern)
  "Check if MAS (or SAM) pattern exists starting at position"
  (let ((chars (list)))
    (dotimes (i 3)
      (push (get-char grid 
                      (+ row (nth i (car pattern)))
                      (+ col (nth i (cdr pattern))))
            chars))
    (or (equal chars '(?M ?A ?S))
        (equal  chars '(?S ?A ?M)))))

(defun check-x-mas (grid row col)
  "Check if X-MAS pattern exists at position"
  (let ((patterns (list 
                   ;; First diagonal (top-left to bottom-right)
                   (cons '(0 1 2) '(0 1 2))
                   ;; Second diagonal (top-right to bottom-left)
                   (cons '(0 1 2) '(2 1 0)))))
    (when (and (check-mas grid row col (car patterns))
               (check-mas grid row col (cadr patterns)))
      1)))

(defun count-x-mas (grid)
  "Count X-MAS patterns in grid"
  (let ((rows (length grid))
        (cols (length (car grid))))
    (cl-loop for row from 0 below (- rows 2) sum
             (cl-loop for col from 0 below (- cols 2) sum
                     (or (check-x-mas grid row col) 0)))))

;; Parse and solve
(let ((grid (parse-grid raw_input4)))
  (count-x-mas grid))
#+end_src
